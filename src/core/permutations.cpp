#include <algorithm>
#include <vector>

size_t factorial(size_t n) {
	if (n == 1) {
		return 1;
	}

	return n * factorial(n - 1);
}

/*
 * This was shamelessly generated by ChatGPT to make my life easier
 */
int permutation_sign(const std::vector<size_t> &permutation) {
	int sign = 1;
	std::vector<bool> visited(permutation.size(), false);

	for (size_t i = 0; i < permutation.size(); ++i) {
		if (!visited[i]) {
			size_t cycle_length = 0;
			for (size_t j = i; !visited[j]; j = permutation[j]) {
				visited[j] = true;
				++cycle_length;
			}
			if (cycle_length % 2 == 0) {
				sign = -sign;
			}
		}
	}

	return sign;
}

std::vector<std::pair<std::vector<size_t>, int>> generate_permutations(size_t n
) {
	std::vector<std::pair<std::vector<size_t>, int>> permutations;
	permutations.reserve(factorial(n));

	std::vector<size_t> current_permutation(n);
	for (size_t i = 0; i < n; ++i) {
		current_permutation[i] = i;
	}

	do {
		permutations.push_back(std::make_pair(
			current_permutation, permutation_sign(current_permutation)
		));
	} while (std::next_permutation(
		current_permutation.begin(), current_permutation.end()
	));

	return permutations;
}
